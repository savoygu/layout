@use 'config';

// CSS var
// joinVarName(('color', 'white')) => --slv-color-white
@function joinVarName($list) {
  $name: '--' + config.$namespace;
  @each $item in $list {
    @if $item != '' {
      $name: $name + '-' + $item;
    }
  }
  @return $name;
}

// getCssVarName('color', 'white') => --slv-color-white
@function getCssVarName($args...) {
  @return joinVarName($args);
}

// getCssVar('color', 'white') => var(--slv-color-white)
@function getCssVar($args...) {
  @return var(#{joinVarName($args)});
}

// getCssVar(('color', 'white'), red) => var(--slv-color-white, red)
@function getCssVarWithDefault($args, $default) {
  @return var(#{joinVarName($args)}, #{$default});
}

// BEM
@function selectorToString($selector) {
  $selector: inspect($selector);
  $selector: str-slice($selector, 2, -2);
  @return $selector;
}

@function containModifier($selector) {
  $selector: selectorToString($selector);

  @if str-index($selector, config.$modifier-separator) {
    @return true;
  } @else {
    @return false;
  }
}

@function containWhenFlag($selector) {
  $selector: selectorToString($selector);

  @if str-index($selector, '.' + config.$state-prefix) {
    @return true;
  } @else {
    @return false;
  }
}

@function containPseudoClass($selector) {
  $selector: selectorToString($selector);

  @if str-index($selector, ':') {
    @return true;
  } @else {
    @return false;
  }
}

@function hitAllSpecialNestRule($selector) {
  @return containModifier($selector) or containWhenFlag($selector) or
    containPseudoClass($selector);
}
